{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nconst STORAGE_KEY = 'apwu_auth_user_v1'; // current session\nconst USERS_KEY = 'apwu_auth_users_v1'; // “database” of users\nexport class AuthService {\n  constructor() {\n    this._user$ = new BehaviorSubject(loadSessionUser());\n    this.user$ = this._user$.asObservable();\n  }\n  // ===== Session helpers =====\n  get user() {\n    return this._user$.getValue();\n  }\n  get isLoggedIn() {\n    return !!this.user;\n  }\n  get roles() {\n    return this.user?.roles ?? [];\n  } // <-- added\n  isAdmin() {\n    return this.hasRole('Admin');\n  }\n  isMember() {\n    return this.hasRole('Member');\n  } // <-- added\n  hasRole(role) {\n    return !!this.user?.roles.includes(role);\n  }\n  hasAnyRole(required) {\n    return required.some(r => this.hasRole(r));\n  }\n  // ===== Registration / Login (mocked) =====\n  emailExists(email, excludeUserId) {\n    const users = loadUsers();\n    const lower = email.toLowerCase();\n    return users.some(u => u.email.toLowerCase() === lower && u.id !== excludeUserId);\n  }\n  register(opts) {\n    const {\n      name,\n      email,\n      password\n    } = opts;\n    const role = opts.role ?? 'Member';\n    if (!name?.trim() || !email?.trim() || !password?.trim()) return {\n      ok: false,\n      error: 'All fields are required.'\n    };\n    if (this.emailExists(email)) return {\n      ok: false,\n      error: 'An account with that email already exists.'\n    };\n    const users = loadUsers();\n    const created = {\n      id: crypto.randomUUID(),\n      name: name.trim(),\n      email: email.trim().toLowerCase(),\n      roles: [role],\n      password,\n      dob: null,\n      phone: null,\n      token: undefined\n    };\n    users.push(created);\n    saveUsers(users);\n    // Auto-login\n    const sessionUser = toPublic(created);\n    sessionUser.token = 'mock.' + btoa(sessionUser.email);\n    saveSessionUser(sessionUser);\n    this._user$.next(sessionUser);\n    return {\n      ok: true\n    };\n  }\n  login(email, password, role = 'Member') {\n    const users = loadUsers();\n    const existing = users.find(u => u.email.toLowerCase() === email.toLowerCase());\n    if (existing) {\n      if (existing.password !== password) return false;\n      const sessionUser = toPublic(existing);\n      sessionUser.token = 'mock.' + btoa(sessionUser.email);\n      saveSessionUser(sessionUser);\n      this._user$.next(sessionUser);\n      return true;\n    }\n    // Fallback quick login\n    if (!email || !password) return false;\n    const mock = {\n      id: crypto.randomUUID(),\n      name: email.split('@')[0],\n      email,\n      roles: [role],\n      password,\n      dob: null,\n      phone: null,\n      token: undefined\n    };\n    // Save to \"db\" so profile can be edited later\n    users.push(mock);\n    saveUsers(users);\n    const sessionUser = toPublic(mock);\n    sessionUser.token = 'mock.' + btoa(sessionUser.email);\n    saveSessionUser(sessionUser);\n    this._user$.next(sessionUser);\n    return true;\n  }\n  loginAsAdmin() {\n    return this.login('admin@apwu.local', 'admin', 'Admin');\n  }\n  loginAsMember() {\n    return this.login('member@apwu.local', 'member', 'Member');\n  }\n  logout() {\n    localStorage.removeItem(STORAGE_KEY);\n    this._user$.next(null);\n  }\n  // ===== Profile update =====\n  updateProfile(patch) {\n    const current = this.user;\n    if (!current) return {\n      ok: false,\n      error: 'Not authenticated.'\n    };\n    const users = loadUsers();\n    const idx = users.findIndex(u => u.id === current.id);\n    if (idx < 0) return {\n      ok: false,\n      error: 'User not found.'\n    };\n    const email = patch.email.trim().toLowerCase();\n    if (this.emailExists(email, current.id)) return {\n      ok: false,\n      error: 'Email already in use by another account.'\n    };\n    // Update DB\n    const existing = users[idx];\n    users[idx] = {\n      ...existing,\n      name: patch.name.trim(),\n      email,\n      dob: patch.dob ?? null,\n      phone: patch.phone ?? null\n    };\n    saveUsers(users);\n    // Update session\n    const updatedSession = toPublic(users[idx]);\n    updatedSession.token = 'mock.' + btoa(updatedSession.email);\n    saveSessionUser(updatedSession);\n    this._user$.next(updatedSession);\n    return {\n      ok: true\n    };\n  }\n  // ===== Admin-use helpers =====\n  listUsers() {\n    const priv = loadUsers();\n    return priv.map(toPublic);\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\n// ===== Helpers =====\nfunction toPublic(u) {\n  const {\n    password,\n    ...pub\n  } = u;\n  return pub;\n}\nfunction loadSessionUser() {\n  try {\n    const raw = localStorage.getItem(STORAGE_KEY);\n    return raw ? JSON.parse(raw) : null;\n  } catch {\n    return null;\n  }\n}\nfunction saveSessionUser(u) {\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(u));\n}\nfunction loadUsers() {\n  try {\n    const raw = localStorage.getItem(USERS_KEY);\n    const list = raw ? JSON.parse(raw) : [];\n    if (!list.length) {\n      const seedAdmin = {\n        id: crypto.randomUUID(),\n        name: 'Admin',\n        email: 'admin@apwu.local',\n        password: 'admin',\n        roles: ['Admin'],\n        dob: '1990-01-01',\n        phone: '555-0100',\n        token: undefined\n      };\n      const seedMember = {\n        id: crypto.randomUUID(),\n        name: 'Member',\n        email: 'member@apwu.local',\n        password: 'member',\n        roles: ['Member'],\n        dob: '1992-02-02',\n        phone: '555-0200',\n        token: undefined\n      };\n      const seeded = [seedAdmin, seedMember];\n      saveUsers(seeded);\n      return seeded;\n    }\n    return list;\n  } catch {\n    return [];\n  }\n}\nfunction saveUsers(list) {\n  localStorage.setItem(USERS_KEY, JSON.stringify(list));\n}","map":{"version":3,"names":["BehaviorSubject","STORAGE_KEY","USERS_KEY","AuthService","constructor","_user$","loadSessionUser","user$","asObservable","user","getValue","isLoggedIn","roles","isAdmin","hasRole","isMember","role","includes","hasAnyRole","required","some","r","emailExists","email","excludeUserId","users","loadUsers","lower","toLowerCase","u","id","register","opts","name","password","trim","ok","error","created","crypto","randomUUID","dob","phone","token","undefined","push","saveUsers","sessionUser","toPublic","btoa","saveSessionUser","next","login","existing","find","mock","split","loginAsAdmin","loginAsMember","logout","localStorage","removeItem","updateProfile","patch","current","idx","findIndex","updatedSession","listUsers","priv","map","factory","ɵfac","providedIn","pub","raw","getItem","JSON","parse","setItem","stringify","list","length","seedAdmin","seedMember","seeded"],"sources":["/Users/zaq/Documents/GitHub/Angular-APWU/src/app/core/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nexport interface User {\n  id: string;\n  name: string;\n  email: string;\n  roles: string[]; // e.g. ['Admin'] or ['Member']\n  // Profile fields\n  dob?: string | null;   // ISO date string: 'YYYY-MM-DD'\n  phone?: string | null;\n  token?: string;\n}\n\ntype PrivateUser = User & { password: string };\n\nconst STORAGE_KEY = 'apwu_auth_user_v1';  // current session\nconst USERS_KEY   = 'apwu_auth_users_v1'; // “database” of users\n\n@Injectable({ providedIn: 'root' })\nexport class AuthService {\n  private _user$ = new BehaviorSubject<User | null>(loadSessionUser());\n  user$ = this._user$.asObservable();\n\n  // ===== Session helpers =====\n  get user(): User | null { return this._user$.getValue(); }\n  get isLoggedIn(): boolean { return !!this.user; }\n  get roles(): string[] { return this.user?.roles ?? []; }            // <-- added\n  isAdmin(): boolean { return this.hasRole('Admin'); }\n  isMember(): boolean { return this.hasRole('Member'); }              // <-- added\n  hasRole(role: string): boolean { return !!this.user?.roles.includes(role); }\n  hasAnyRole(required: string[]): boolean { return required.some(r => this.hasRole(r)); }\n\n  // ===== Registration / Login (mocked) =====\n  emailExists(email: string, excludeUserId?: string): boolean {\n    const users = loadUsers();\n    const lower = email.toLowerCase();\n    return users.some(u => u.email.toLowerCase() === lower && u.id !== excludeUserId);\n  }\n\n  register(opts: { name: string; email: string; password: string; role?: 'Admin' | 'Member' }): { ok: boolean; error?: string } {\n    const { name, email, password } = opts;\n    const role = opts.role ?? 'Member';\n\n    if (!name?.trim() || !email?.trim() || !password?.trim()) return { ok: false, error: 'All fields are required.' };\n    if (this.emailExists(email)) return { ok: false, error: 'An account with that email already exists.' };\n\n    const users = loadUsers();\n    const created: PrivateUser = {\n      id: crypto.randomUUID(),\n      name: name.trim(),\n      email: email.trim().toLowerCase(),\n      roles: [role],\n      password,\n      dob: null,\n      phone: null,\n      token: undefined,\n    };\n    users.push(created);\n    saveUsers(users);\n\n    // Auto-login\n    const sessionUser: User = toPublic(created);\n    sessionUser.token = 'mock.' + btoa(sessionUser.email);\n    saveSessionUser(sessionUser);\n    this._user$.next(sessionUser);\n    return { ok: true };\n  }\n\n  login(email: string, password: string, role: 'Admin' | 'Member' = 'Member'): boolean {\n    const users = loadUsers();\n    const existing = users.find(u => u.email.toLowerCase() === email.toLowerCase());\n    if (existing) {\n      if (existing.password !== password) return false;\n      const sessionUser: User = toPublic(existing);\n      sessionUser.token = 'mock.' + btoa(sessionUser.email);\n      saveSessionUser(sessionUser);\n      this._user$.next(sessionUser);\n      return true;\n    }\n\n    // Fallback quick login\n    if (!email || !password) return false;\n    const mock: PrivateUser = {\n      id: crypto.randomUUID(),\n      name: email.split('@')[0],\n      email,\n      roles: [role],\n      password,\n      dob: null,\n      phone: null,\n      token: undefined,\n    };\n    // Save to \"db\" so profile can be edited later\n    users.push(mock);\n    saveUsers(users);\n\n    const sessionUser: User = toPublic(mock);\n    sessionUser.token = 'mock.' + btoa(sessionUser.email);\n    saveSessionUser(sessionUser);\n    this._user$.next(sessionUser);\n    return true;\n  }\n\n  loginAsAdmin() { return this.login('admin@apwu.local', 'admin', 'Admin'); }\n  loginAsMember() { return this.login('member@apwu.local', 'member', 'Member'); }\n\n  logout(): void {\n    localStorage.removeItem(STORAGE_KEY);\n    this._user$.next(null);\n  }\n\n  // ===== Profile update =====\n  updateProfile(patch: { name: string; email: string; dob?: string | null; phone?: string | null }): { ok: boolean; error?: string } {\n    const current = this.user;\n    if (!current) return { ok: false, error: 'Not authenticated.' };\n\n    const users = loadUsers();\n    const idx = users.findIndex(u => u.id === current.id);\n    if (idx < 0) return { ok: false, error: 'User not found.' };\n\n    const email = patch.email.trim().toLowerCase();\n    if (this.emailExists(email, current.id)) return { ok: false, error: 'Email already in use by another account.' };\n\n    // Update DB\n    const existing = users[idx];\n    users[idx] = {\n      ...existing,\n      name: patch.name.trim(),\n      email,\n      dob: patch.dob ?? null,\n      phone: patch.phone ?? null,\n    };\n    saveUsers(users);\n\n    // Update session\n    const updatedSession: User = toPublic(users[idx]);\n    updatedSession.token = 'mock.' + btoa(updatedSession.email);\n    saveSessionUser(updatedSession);\n    this._user$.next(updatedSession);\n\n    return { ok: true };\n  }\n\n  // ===== Admin-use helpers =====\n  listUsers(): User[] {\n    const priv = loadUsers();\n    return priv.map(toPublic);\n  }\n}\n\n// ===== Helpers =====\nfunction toPublic(u: PrivateUser): User {\n  const { password, ...pub } = u;\n  return pub;\n}\n\nfunction loadSessionUser(): User | null {\n  try { const raw = localStorage.getItem(STORAGE_KEY); return raw ? (JSON.parse(raw) as User) : null; }\n  catch { return null; }\n}\nfunction saveSessionUser(u: User) { localStorage.setItem(STORAGE_KEY, JSON.stringify(u)); }\n\nfunction loadUsers(): PrivateUser[] {\n  try {\n    const raw = localStorage.getItem(USERS_KEY);\n    const list = raw ? (JSON.parse(raw) as PrivateUser[]) : [];\n    if (!list.length) {\n      const seedAdmin: PrivateUser = {\n        id: crypto.randomUUID(), name: 'Admin', email: 'admin@apwu.local', password: 'admin', roles: ['Admin'],\n        dob: '1990-01-01', phone: '555-0100', token: undefined,\n      };\n      const seedMember: PrivateUser = {\n        id: crypto.randomUUID(), name: 'Member', email: 'member@apwu.local', password: 'member', roles: ['Member'],\n        dob: '1992-02-02', phone: '555-0200', token: undefined,\n      };\n      const seeded = [seedAdmin, seedMember];\n      saveUsers(seeded);\n      return seeded;\n    }\n    return list;\n  } catch { return []; }\n}\nfunction saveUsers(list: PrivateUser[]) { localStorage.setItem(USERS_KEY, JSON.stringify(list)); }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}