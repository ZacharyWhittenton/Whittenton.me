{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nconst STORAGE_KEY = 'apwu_auth_user_v1';\nexport class AuthService {\n  constructor() {\n    this._user$ = new BehaviorSubject(loadUser());\n    this.user$ = this._user$.asObservable();\n  }\n  get user() {\n    return this._user$.getValue();\n  }\n  get isLoggedIn() {\n    return !!this.user;\n  }\n  login(email, password, role = 'Member') {\n    if (!email || !password) return false;\n    const mock = {\n      id: crypto.randomUUID(),\n      name: email.split('@')[0],\n      email,\n      roles: [role],\n      token: 'mock-jwt-token.' + btoa(email)\n    };\n    saveUser(mock);\n    this._user$.next(mock);\n    return true;\n  }\n  loginAsAdmin() {\n    return this.login('admin@apwu.local', 'admin', 'Admin');\n  }\n  loginAsMember() {\n    return this.login('member@apwu.local', 'member', 'Member');\n  }\n  logout() {\n    localStorage.removeItem(STORAGE_KEY);\n    this._user$.next(null);\n  }\n  hasRole(role) {\n    return !!this.user?.roles.includes(role);\n  }\n  hasAnyRole(required) {\n    return required.some(r => this.hasRole(r));\n  }\n  /** Convenience used by AdminGuard */\n  isAdmin() {\n    return this.hasRole('Admin');\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nfunction loadUser() {\n  try {\n    const raw = localStorage.getItem(STORAGE_KEY);\n    if (!raw) return null;\n    return JSON.parse(raw);\n  } catch {\n    return null;\n  }\n}\nfunction saveUser(u) {\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(u));\n}","map":{"version":3,"names":["BehaviorSubject","STORAGE_KEY","AuthService","constructor","_user$","loadUser","user$","asObservable","user","getValue","isLoggedIn","login","email","password","role","mock","id","crypto","randomUUID","name","split","roles","token","btoa","saveUser","next","loginAsAdmin","loginAsMember","logout","localStorage","removeItem","hasRole","includes","hasAnyRole","required","some","r","isAdmin","factory","ɵfac","providedIn","raw","getItem","JSON","parse","u","setItem","stringify"],"sources":["/Users/zaq/Documents/GitHub/Angular-APWU/src/app/core/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nexport interface User {\n  id: string;\n  name: string;\n  email: string;\n  roles: string[]; // e.g., ['Admin'] or ['Member']\n  token?: string;  // optional mock token\n}\n\nconst STORAGE_KEY = 'apwu_auth_user_v1';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthService {\n  private _user$ = new BehaviorSubject<User | null>(loadUser());\n  user$ = this._user$.asObservable();\n\n  get user(): User | null {\n    return this._user$.getValue();\n  }\n  get isLoggedIn(): boolean {\n    return !!this.user;\n  }\n\n  login(email: string, password: string, role: 'Admin' | 'Member' = 'Member'): boolean {\n    if (!email || !password) return false;\n\n    const mock: User = {\n      id: crypto.randomUUID(),\n      name: email.split('@')[0],\n      email,\n      roles: [role],\n      token: 'mock-jwt-token.' + btoa(email),\n    };\n\n    saveUser(mock);\n    this._user$.next(mock);\n    return true;\n  }\n\n  loginAsAdmin() { return this.login('admin@apwu.local', 'admin', 'Admin'); }\n  loginAsMember() { return this.login('member@apwu.local', 'member', 'Member'); }\n\n  logout(): void {\n    localStorage.removeItem(STORAGE_KEY);\n    this._user$.next(null);\n  }\n\n  hasRole(role: string): boolean {\n    return !!this.user?.roles.includes(role);\n  }\n  hasAnyRole(required: string[]): boolean {\n    return required.some(r => this.hasRole(r));\n  }\n  /** Convenience used by AdminGuard */\n  isAdmin(): boolean {\n    return this.hasRole('Admin');\n  }\n}\n\nfunction loadUser(): User | null {\n  try {\n    const raw = localStorage.getItem(STORAGE_KEY);\n    if (!raw) return null;\n    return JSON.parse(raw) as User;\n  } catch {\n    return null;\n  }\n}\nfunction saveUser(u: User) {\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(u));\n}\n"],"mappings":"AACA,SAASA,eAAe,QAAQ,MAAM;;AAUtC,MAAMC,WAAW,GAAG,mBAAmB;AAGvC,OAAM,MAAOC,WAAW;EADxBC,YAAA;IAEU,KAAAC,MAAM,GAAG,IAAIJ,eAAe,CAAcK,QAAQ,EAAE,CAAC;IAC7D,KAAAC,KAAK,GAAG,IAAI,CAACF,MAAM,CAACG,YAAY,EAAE;;EAElC,IAAIC,IAAIA,CAAA;IACN,OAAO,IAAI,CAACJ,MAAM,CAACK,QAAQ,EAAE;EAC/B;EACA,IAAIC,UAAUA,CAAA;IACZ,OAAO,CAAC,CAAC,IAAI,CAACF,IAAI;EACpB;EAEAG,KAAKA,CAACC,KAAa,EAAEC,QAAgB,EAAEC,IAAA,GAA2B,QAAQ;IACxE,IAAI,CAACF,KAAK,IAAI,CAACC,QAAQ,EAAE,OAAO,KAAK;IAErC,MAAME,IAAI,GAAS;MACjBC,EAAE,EAAEC,MAAM,CAACC,UAAU,EAAE;MACvBC,IAAI,EAAEP,KAAK,CAACQ,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACzBR,KAAK;MACLS,KAAK,EAAE,CAACP,IAAI,CAAC;MACbQ,KAAK,EAAE,iBAAiB,GAAGC,IAAI,CAACX,KAAK;KACtC;IAEDY,QAAQ,CAACT,IAAI,CAAC;IACd,IAAI,CAACX,MAAM,CAACqB,IAAI,CAACV,IAAI,CAAC;IACtB,OAAO,IAAI;EACb;EAEAW,YAAYA,CAAA;IAAK,OAAO,IAAI,CAACf,KAAK,CAAC,kBAAkB,EAAE,OAAO,EAAE,OAAO,CAAC;EAAE;EAC1EgB,aAAaA,CAAA;IAAK,OAAO,IAAI,CAAChB,KAAK,CAAC,mBAAmB,EAAE,QAAQ,EAAE,QAAQ,CAAC;EAAE;EAE9EiB,MAAMA,CAAA;IACJC,YAAY,CAACC,UAAU,CAAC7B,WAAW,CAAC;IACpC,IAAI,CAACG,MAAM,CAACqB,IAAI,CAAC,IAAI,CAAC;EACxB;EAEAM,OAAOA,CAACjB,IAAY;IAClB,OAAO,CAAC,CAAC,IAAI,CAACN,IAAI,EAAEa,KAAK,CAACW,QAAQ,CAAClB,IAAI,CAAC;EAC1C;EACAmB,UAAUA,CAACC,QAAkB;IAC3B,OAAOA,QAAQ,CAACC,IAAI,CAACC,CAAC,IAAI,IAAI,CAACL,OAAO,CAACK,CAAC,CAAC,CAAC;EAC5C;EACA;EACAC,OAAOA,CAAA;IACL,OAAO,IAAI,CAACN,OAAO,CAAC,OAAO,CAAC;EAC9B;;;uBA5CW7B,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAoC,OAAA,EAAXpC,WAAW,CAAAqC,IAAA;MAAAC,UAAA,EADE;IAAM;EAAA;;AAgDhC,SAASnC,QAAQA,CAAA;EACf,IAAI;IACF,MAAMoC,GAAG,GAAGZ,YAAY,CAACa,OAAO,CAACzC,WAAW,CAAC;IAC7C,IAAI,CAACwC,GAAG,EAAE,OAAO,IAAI;IACrB,OAAOE,IAAI,CAACC,KAAK,CAACH,GAAG,CAAS;GAC/B,CAAC,MAAM;IACN,OAAO,IAAI;;AAEf;AACA,SAASjB,QAAQA,CAACqB,CAAO;EACvBhB,YAAY,CAACiB,OAAO,CAAC7C,WAAW,EAAE0C,IAAI,CAACI,SAAS,CAACF,CAAC,CAAC,CAAC;AACtD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}