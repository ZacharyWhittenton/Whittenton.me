{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class RoleGuard {\n  constructor(auth, router) {\n    this.auth = auth;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    const allowed = route.data?.['roles'] ?? [];\n    // Not signed in → send to login and keep where they were going\n    if (!this.auth.isLoggedIn) {\n      return this.router.createUrlTree(['/auth/login'], {\n        queryParams: {\n          redirect: state.url || '/scheduler'\n        }\n      });\n    }\n    // If no roles specified, any authenticated user is allowed\n    if (!allowed.length) return true;\n    // Allow only if user has any of the allowed roles\n    if (this.auth.hasAnyRole(allowed)) return true;\n    // Logged in but not permitted → send home (or a 403 route if you add one)\n    return this.router.createUrlTree(['/']);\n  }\n  static {\n    this.ɵfac = function RoleGuard_Factory(t) {\n      return new (t || RoleGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RoleGuard,\n      factory: RoleGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["RoleGuard","constructor","auth","router","canActivate","route","state","allowed","data","isLoggedIn","createUrlTree","queryParams","redirect","url","length","hasAnyRole","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac","providedIn"],"sources":["/Users/zaq/Documents/GitHub/Angular-APWU/src/app/core/guards/role.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  CanActivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  Router,\n  UrlTree,\n} from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class RoleGuard implements CanActivate {\n  constructor(private auth: AuthService, private router: Router) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean | UrlTree {\n    const allowed: string[] = route.data?.['roles'] ?? [];\n\n    // Not signed in → send to login and keep where they were going\n    if (!this.auth.isLoggedIn) {\n      return this.router.createUrlTree(['/auth/login'], {\n        queryParams: { redirect: state.url || '/scheduler' },\n      });\n    }\n\n    // If no roles specified, any authenticated user is allowed\n    if (!allowed.length) return true;\n\n    // Allow only if user has any of the allowed roles\n    if (this.auth.hasAnyRole(allowed)) return true;\n\n    // Logged in but not permitted → send home (or a 403 route if you add one)\n    return this.router.createUrlTree(['/']);\n  }\n}\n"],"mappings":";;;AAWA,OAAM,MAAOA,SAAS;EACpBC,YAAoBC,IAAiB,EAAUC,MAAc;IAAzC,KAAAD,IAAI,GAAJA,IAAI;IAAuB,KAAAC,MAAM,GAANA,MAAM;EAAW;EAEhEC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IAE1B,MAAMC,OAAO,GAAaF,KAAK,CAACG,IAAI,GAAG,OAAO,CAAC,IAAI,EAAE;IAErD;IACA,IAAI,CAAC,IAAI,CAACN,IAAI,CAACO,UAAU,EAAE;MACzB,OAAO,IAAI,CAACN,MAAM,CAACO,aAAa,CAAC,CAAC,aAAa,CAAC,EAAE;QAChDC,WAAW,EAAE;UAAEC,QAAQ,EAAEN,KAAK,CAACO,GAAG,IAAI;QAAY;OACnD,CAAC;;IAGJ;IACA,IAAI,CAACN,OAAO,CAACO,MAAM,EAAE,OAAO,IAAI;IAEhC;IACA,IAAI,IAAI,CAACZ,IAAI,CAACa,UAAU,CAACR,OAAO,CAAC,EAAE,OAAO,IAAI;IAE9C;IACA,OAAO,IAAI,CAACJ,MAAM,CAACO,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC;EACzC;;;uBAxBWV,SAAS,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAATrB,SAAS;MAAAsB,OAAA,EAATtB,SAAS,CAAAuB,IAAA;MAAAC,UAAA,EADI;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}