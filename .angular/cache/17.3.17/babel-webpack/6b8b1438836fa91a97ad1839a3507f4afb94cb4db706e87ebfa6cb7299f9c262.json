{"ast":null,"code":"import { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.TOKEN_KEY = 'auth_token';\n  }\n  login(credentials) {\n    return this.http.post('/api/login', credentials).pipe(tap(response => {\n      localStorage.setItem(this.TOKEN_KEY, response.token);\n    }));\n  }\n  logout() {\n    localStorage.removeItem(this.TOKEN_KEY);\n    this.router.navigate(['/auth']);\n  }\n  isAuthenticated() {\n    return !!localStorage.getItem(this.TOKEN_KEY);\n  }\n  getToken() {\n    return localStorage.getItem(this.TOKEN_KEY);\n  }\n  getUserRole() {\n    const token = this.getToken();\n    if (!token) return null;\n    // Simulate decoding (replace with real decoding if using JWT)\n    const payload = JSON.parse(atob(token.split('.')[1])); // this assumes JWT format\n    return payload.role || null;\n  }\n  isAdmin() {\n    return this.getUserRole() === 'admin';\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["tap","AuthService","constructor","http","router","TOKEN_KEY","login","credentials","post","pipe","response","localStorage","setItem","token","logout","removeItem","navigate","isAuthenticated","getItem","getToken","getUserRole","payload","JSON","parse","atob","split","role","isAdmin","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["/Users/zaq/Documents/GitHub/Angular-APWU/src/app/core/services/auth.service.ts"],"sourcesContent":["// core/services/auth.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { tap } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthService {\n  private readonly TOKEN_KEY = 'auth_token';\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  login(credentials: { email: string; password: string }): Observable<{ token: string }> {\n    return this.http.post<{ token: string }>('/api/login', credentials).pipe(\n      tap((response: { token: string }) => {\n        localStorage.setItem(this.TOKEN_KEY, response.token);\n      })\n    );\n  }\n\n  logout(): void {\n    localStorage.removeItem(this.TOKEN_KEY);\n    this.router.navigate(['/auth']);\n  }\n\n  isAuthenticated(): boolean {\n    return !!localStorage.getItem(this.TOKEN_KEY);\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem(this.TOKEN_KEY);\n  }\n\n  getUserRole(): string | null {\n  const token = this.getToken();\n  if (!token) return null;\n\n  // Simulate decoding (replace with real decoding if using JWT)\n  const payload = JSON.parse(atob(token.split('.')[1])); // this assumes JWT format\n  return payload.role || null;\n}\n\nisAdmin(): boolean {\n  return this.getUserRole() === 'admin';\n}\n}\n"],"mappings":"AAIA,SAASA,GAAG,QAAQ,gBAAgB;;;;AAIpC,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAFnC,KAAAC,SAAS,GAAG,YAAY;EAEsB;EAE/DC,KAAKA,CAACC,WAAgD;IACpD,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAoB,YAAY,EAAED,WAAW,CAAC,CAACE,IAAI,CACtET,GAAG,CAAEU,QAA2B,IAAI;MAClCC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACP,SAAS,EAAEK,QAAQ,CAACG,KAAK,CAAC;IACtD,CAAC,CAAC,CACH;EACH;EAEAC,MAAMA,CAAA;IACJH,YAAY,CAACI,UAAU,CAAC,IAAI,CAACV,SAAS,CAAC;IACvC,IAAI,CAACD,MAAM,CAACY,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;EACjC;EAEAC,eAAeA,CAAA;IACb,OAAO,CAAC,CAACN,YAAY,CAACO,OAAO,CAAC,IAAI,CAACb,SAAS,CAAC;EAC/C;EAEAc,QAAQA,CAAA;IACN,OAAOR,YAAY,CAACO,OAAO,CAAC,IAAI,CAACb,SAAS,CAAC;EAC7C;EAEAe,WAAWA,CAAA;IACX,MAAMP,KAAK,GAAG,IAAI,CAACM,QAAQ,EAAE;IAC7B,IAAI,CAACN,KAAK,EAAE,OAAO,IAAI;IAEvB;IACA,MAAMQ,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACX,KAAK,CAACY,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvD,OAAOJ,OAAO,CAACK,IAAI,IAAI,IAAI;EAC7B;EAEAC,OAAOA,CAAA;IACL,OAAO,IAAI,CAACP,WAAW,EAAE,KAAK,OAAO;EACvC;;;uBArCanB,WAAW,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAAXhC,WAAW;MAAAiC,OAAA,EAAXjC,WAAW,CAAAkC,IAAA;MAAAC,UAAA,EADE;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}