{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BlogService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = '/api/blog';\n  }\n  // List all posts\n  getAll() {\n    return this.http.get(this.baseUrl);\n  }\n  // Get a single post by id\n  get(id) {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n  // Create a post (no id in body)\n  create(post) {\n    return this.http.post(this.baseUrl, post);\n  }\n  // Update a post by id (no id in body)\n  update(id, post) {\n    return this.http.put(`${this.baseUrl}/${id}`, post);\n  }\n  // Delete a post\n  delete(id) {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n  static {\n    this.ɵfac = function BlogService_Factory(t) {\n      return new (t || BlogService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: BlogService,\n      factory: BlogService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BlogService","constructor","http","baseUrl","getAll","get","id","create","post","update","put","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/zaq/Documents/GitHub/Angular-APWU/src/app/features/blog/services/blog.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nexport interface BlogPost {\n  id: number;\n  title: string;\n  content: string;\n}\n\nexport interface BlogPostDto {\n  title: string;\n  content: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class BlogService {\n  private readonly baseUrl = '/api/blog';\n\n  constructor(private http: HttpClient) {}\n\n  // List all posts\n  getAll(): Observable<BlogPost[]> {\n    return this.http.get<BlogPost[]>(this.baseUrl);\n  }\n\n  // Get a single post by id\n  get(id: number): Observable<BlogPost> {\n    return this.http.get<BlogPost>(`${this.baseUrl}/${id}`);\n  }\n\n  // Create a post (no id in body)\n  create(post: BlogPostDto): Observable<BlogPost> {\n    return this.http.post<BlogPost>(this.baseUrl, post);\n  }\n\n  // Update a post by id (no id in body)\n  update(id: number, post: BlogPostDto): Observable<BlogPost> {\n    return this.http.put<BlogPost>(`${this.baseUrl}/${id}`, post);\n  }\n\n  // Delete a post\n  delete(id: number): Observable<void> {\n    return this.http.delete<void>(`${this.baseUrl}/${id}`);\n  }\n}\n"],"mappings":";;AAgBA,OAAM,MAAOA,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFP,KAAAC,OAAO,GAAG,WAAW;EAEC;EAEvC;EACAC,MAAMA,CAAA;IACJ,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAa,IAAI,CAACF,OAAO,CAAC;EAChD;EAEA;EACAE,GAAGA,CAACC,EAAU;IACZ,OAAO,IAAI,CAACJ,IAAI,CAACG,GAAG,CAAW,GAAG,IAAI,CAACF,OAAO,IAAIG,EAAE,EAAE,CAAC;EACzD;EAEA;EACAC,MAAMA,CAACC,IAAiB;IACtB,OAAO,IAAI,CAACN,IAAI,CAACM,IAAI,CAAW,IAAI,CAACL,OAAO,EAAEK,IAAI,CAAC;EACrD;EAEA;EACAC,MAAMA,CAACH,EAAU,EAAEE,IAAiB;IAClC,OAAO,IAAI,CAACN,IAAI,CAACQ,GAAG,CAAW,GAAG,IAAI,CAACP,OAAO,IAAIG,EAAE,EAAE,EAAEE,IAAI,CAAC;EAC/D;EAEA;EACAG,MAAMA,CAACL,EAAU;IACf,OAAO,IAAI,CAACJ,IAAI,CAACS,MAAM,CAAO,GAAG,IAAI,CAACR,OAAO,IAAIG,EAAE,EAAE,CAAC;EACxD;;;uBA5BWN,WAAW,EAAAY,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXf,WAAW;MAAAgB,OAAA,EAAXhB,WAAW,CAAAiB,IAAA;MAAAC,UAAA,EADE;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}