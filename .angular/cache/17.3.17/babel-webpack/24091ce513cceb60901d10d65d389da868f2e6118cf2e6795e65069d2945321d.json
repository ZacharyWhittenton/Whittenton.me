{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nconst STORAGE_KEY = 'apwu_auth_user_v1'; // current session\nconst USERS_KEY = 'apwu_auth_users_v1'; // “database” of users\nexport class AuthService {\n  constructor() {\n    this._user$ = new BehaviorSubject(loadSessionUser());\n    this.user$ = this._user$.asObservable();\n  }\n  // ===== Session helpers =====\n  get user() {\n    return this._user$.getValue();\n  }\n  get isLoggedIn() {\n    return !!this.user;\n  }\n  isAdmin() {\n    return this.hasRole('Admin');\n  }\n  hasRole(role) {\n    return !!this.user?.roles.includes(role);\n  }\n  hasAnyRole(required) {\n    return required.some(r => this.hasRole(r));\n  }\n  // ===== Registration / Login (mocked) =====\n  emailExists(email) {\n    const users = loadUsers();\n    return users.some(u => u.email.toLowerCase() === email.toLowerCase());\n  }\n  register(opts) {\n    const {\n      name,\n      email,\n      password\n    } = opts;\n    const role = opts.role ?? 'Member';\n    if (!name?.trim() || !email?.trim() || !password?.trim()) {\n      return {\n        ok: false,\n        error: 'All fields are required.'\n      };\n    }\n    if (this.emailExists(email)) {\n      return {\n        ok: false,\n        error: 'An account with that email already exists.'\n      };\n    }\n    const users = loadUsers();\n    const created = {\n      id: crypto.randomUUID(),\n      name: name.trim(),\n      email: email.trim().toLowerCase(),\n      roles: [role],\n      password,\n      token: undefined\n    };\n    users.push(created);\n    saveUsers(users);\n    // Auto-login after sign-up\n    const sessionUser = {\n      id: created.id,\n      name: created.name,\n      email: created.email,\n      roles: created.roles,\n      token: 'mock.' + btoa(created.email)\n    };\n    saveSessionUser(sessionUser);\n    this._user$.next(sessionUser);\n    return {\n      ok: true\n    };\n  }\n  login(email, password, role = 'Member') {\n    // If a user exists in the mock DB, validate against it\n    const users = loadUsers();\n    const existing = users.find(u => u.email.toLowerCase() === email.toLowerCase());\n    if (existing) {\n      if (existing.password !== password) return false;\n      const sessionUser = {\n        id: existing.id,\n        name: existing.name,\n        email: existing.email,\n        roles: existing.roles,\n        token: 'mock.' + btoa(existing.email)\n      };\n      saveSessionUser(sessionUser);\n      this._user$.next(sessionUser);\n      return true;\n    }\n    // Fallback “quick login” (admin/member shortcuts)\n    if (!email || !password) return false;\n    const mock = {\n      id: crypto.randomUUID(),\n      name: email.split('@')[0],\n      email,\n      roles: [role],\n      token: 'mock.' + btoa(email)\n    };\n    saveSessionUser(mock);\n    this._user$.next(mock);\n    return true;\n  }\n  loginAsAdmin() {\n    return this.login('admin@apwu.local', 'admin', 'Admin');\n  }\n  loginAsMember() {\n    return this.login('member@apwu.local', 'member', 'Member');\n  }\n  logout() {\n    localStorage.removeItem(STORAGE_KEY);\n    this._user$.next(null);\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\n// ===== LocalStorage helpers =====\nfunction loadSessionUser() {\n  try {\n    const raw = localStorage.getItem(STORAGE_KEY);\n    return raw ? JSON.parse(raw) : null;\n  } catch {\n    return null;\n  }\n}\nfunction saveSessionUser(u) {\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(u));\n}\nfunction loadUsers() {\n  try {\n    const raw = localStorage.getItem(USERS_KEY);\n    const list = raw ? JSON.parse(raw) : [];\n    // seed two users if empty\n    if (!list.length) {\n      const seedAdmin = {\n        id: crypto.randomUUID(),\n        name: 'Admin',\n        email: 'admin@apwu.local',\n        password: 'admin',\n        roles: ['Admin']\n      };\n      const seedMember = {\n        id: crypto.randomUUID(),\n        name: 'Member',\n        email: 'member@apwu.local',\n        password: 'member',\n        roles: ['Member']\n      };\n      const seeded = [seedAdmin, seedMember];\n      saveUsers(seeded);\n      return seeded;\n    }\n    return list;\n  } catch {\n    return [];\n  }\n}\nfunction saveUsers(list) {\n  localStorage.setItem(USERS_KEY, JSON.stringify(list));\n}","map":{"version":3,"names":["BehaviorSubject","STORAGE_KEY","USERS_KEY","AuthService","constructor","_user$","loadSessionUser","user$","asObservable","user","getValue","isLoggedIn","isAdmin","hasRole","role","roles","includes","hasAnyRole","required","some","r","emailExists","email","users","loadUsers","u","toLowerCase","register","opts","name","password","trim","ok","error","created","id","crypto","randomUUID","token","undefined","push","saveUsers","sessionUser","btoa","saveSessionUser","next","login","existing","find","mock","split","loginAsAdmin","loginAsMember","logout","localStorage","removeItem","factory","ɵfac","providedIn","raw","getItem","JSON","parse","setItem","stringify","list","length","seedAdmin","seedMember","seeded"],"sources":["/Users/zaq/Documents/GitHub/Angular-APWU/src/app/core/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nexport interface User {\n  id: string;\n  name: string;\n  email: string;\n  roles: string[]; // e.g. ['Admin'] or ['Member']\n  token?: string;\n}\n\ntype PrivateUser = User & { password: string };\n\nconst STORAGE_KEY = 'apwu_auth_user_v1';  // current session\nconst USERS_KEY   = 'apwu_auth_users_v1'; // “database” of users\n\n@Injectable({ providedIn: 'root' })\nexport class AuthService {\n  private _user$ = new BehaviorSubject<User | null>(loadSessionUser());\n  user$ = this._user$.asObservable();\n\n  // ===== Session helpers =====\n  get user(): User | null {\n    return this._user$.getValue();\n  }\n  get isLoggedIn(): boolean {\n    return !!this.user;\n  }\n  isAdmin(): boolean {\n    return this.hasRole('Admin');\n  }\n  hasRole(role: string): boolean {\n    return !!this.user?.roles.includes(role);\n  }\n  hasAnyRole(required: string[]): boolean {\n    return required.some(r => this.hasRole(r));\n  }\n\n  // ===== Registration / Login (mocked) =====\n  emailExists(email: string): boolean {\n    const users = loadUsers();\n    return users.some(u => u.email.toLowerCase() === email.toLowerCase());\n  }\n\n  register(opts: { name: string; email: string; password: string; role?: 'Admin' | 'Member' }): { ok: boolean; error?: string } {\n    const { name, email, password } = opts;\n    const role = opts.role ?? 'Member';\n\n    if (!name?.trim() || !email?.trim() || !password?.trim()) {\n      return { ok: false, error: 'All fields are required.' };\n    }\n    if (this.emailExists(email)) {\n      return { ok: false, error: 'An account with that email already exists.' };\n    }\n\n    const users = loadUsers();\n    const created: PrivateUser = {\n      id: crypto.randomUUID(),\n      name: name.trim(),\n      email: email.trim().toLowerCase(),\n      roles: [role],\n      password, // ⚠️ plain text in mock DB; swap for hashing with a real backend\n      token: undefined,\n    };\n    users.push(created);\n    saveUsers(users);\n\n    // Auto-login after sign-up\n    const sessionUser: User = {\n      id: created.id,\n      name: created.name,\n      email: created.email,\n      roles: created.roles,\n      token: 'mock.' + btoa(created.email),\n    };\n    saveSessionUser(sessionUser);\n    this._user$.next(sessionUser);\n    return { ok: true };\n  }\n\n  login(email: string, password: string, role: 'Admin' | 'Member' = 'Member'): boolean {\n    // If a user exists in the mock DB, validate against it\n    const users = loadUsers();\n    const existing = users.find(u => u.email.toLowerCase() === email.toLowerCase());\n    if (existing) {\n      if (existing.password !== password) return false;\n      const sessionUser: User = {\n        id: existing.id,\n        name: existing.name,\n        email: existing.email,\n        roles: existing.roles,\n        token: 'mock.' + btoa(existing.email),\n      };\n      saveSessionUser(sessionUser);\n      this._user$.next(sessionUser);\n      return true;\n    }\n\n    // Fallback “quick login” (admin/member shortcuts)\n    if (!email || !password) return false;\n    const mock: User = {\n      id: crypto.randomUUID(),\n      name: email.split('@')[0],\n      email,\n      roles: [role],\n      token: 'mock.' + btoa(email),\n    };\n    saveSessionUser(mock);\n    this._user$.next(mock);\n    return true;\n  }\n\n  loginAsAdmin() { return this.login('admin@apwu.local', 'admin', 'Admin'); }\n  loginAsMember() { return this.login('member@apwu.local', 'member', 'Member'); }\n\n  logout(): void {\n    localStorage.removeItem(STORAGE_KEY);\n    this._user$.next(null);\n  }\n}\n\n// ===== LocalStorage helpers =====\nfunction loadSessionUser(): User | null {\n  try {\n    const raw = localStorage.getItem(STORAGE_KEY);\n    return raw ? (JSON.parse(raw) as User) : null;\n  } catch { return null; }\n}\nfunction saveSessionUser(u: User) {\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(u));\n}\n\nfunction loadUsers(): PrivateUser[] {\n  try {\n    const raw = localStorage.getItem(USERS_KEY);\n    const list = raw ? (JSON.parse(raw) as PrivateUser[]) : [];\n    // seed two users if empty\n    if (!list.length) {\n      const seedAdmin: PrivateUser = {\n        id: crypto.randomUUID(),\n        name: 'Admin',\n        email: 'admin@apwu.local',\n        password: 'admin',\n        roles: ['Admin'],\n      };\n      const seedMember: PrivateUser = {\n        id: crypto.randomUUID(),\n        name: 'Member',\n        email: 'member@apwu.local',\n        password: 'member',\n        roles: ['Member'],\n      };\n      const seeded = [seedAdmin, seedMember];\n      saveUsers(seeded);\n      return seeded;\n    }\n    return list;\n  } catch { return []; }\n}\nfunction saveUsers(list: PrivateUser[]) {\n  localStorage.setItem(USERS_KEY, JSON.stringify(list));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}