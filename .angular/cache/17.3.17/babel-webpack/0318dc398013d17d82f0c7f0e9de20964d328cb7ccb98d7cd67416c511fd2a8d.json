{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nconst STORAGE_KEY = 'apwu_blog_posts_v1';\nfunction slugify(input) {\n  return input.toLowerCase().trim().replace(/[^a-z0-9\\s-]/g, '').replace(/\\s+/g, '-').replace(/-+/g, '-');\n}\nfunction loadInitial() {\n  const raw = localStorage.getItem(STORAGE_KEY);\n  if (raw) {\n    try {\n      const parsed = JSON.parse(raw);\n      if (Array.isArray(parsed)) return parsed;\n    } catch {}\n  }\n  // Seed data so list shows something on first load\n  const seed = [{\n    id: crypto.randomUUID(),\n    slug: 'welcome-to-apwu-austin',\n    title: 'Welcome to APWU Austin',\n    body: 'This is your new blog. Edit or create posts from the Editor.',\n    author: 'APWU Austin',\n    tags: ['welcome'],\n    publishedAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n    published: true\n  }, {\n    id: crypto.randomUUID(),\n    slug: 'monthly-meeting-reminder',\n    title: 'Monthly Meeting Reminder',\n    body: 'Our monthly meeting is the first Thursday at 6pm.',\n    author: 'Secretary',\n    tags: ['meetings', 'reminder'],\n    publishedAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n    published: true\n  }];\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(seed));\n  return seed;\n}\nexport class BlogService {\n  constructor() {\n    this._posts$ = new BehaviorSubject(loadInitial());\n    this.posts$ = this._posts$.asObservable();\n  }\n  save(next) {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(next));\n    this._posts$.next(next);\n  }\n  list() {\n    return this._posts$.getValue().slice().sort((a, b) => (b.publishedAt ?? '').localeCompare(a.publishedAt ?? ''));\n  }\n  getBySlug(slug) {\n    return this._posts$.getValue().find(p => p.slug === slug);\n  }\n  create(input) {\n    const now = new Date().toISOString();\n    const baseSlug = input.slug?.trim() ? slugify(input.slug) : slugify(input.title);\n    const posts = this._posts$.getValue();\n    let uniqueSlug = baseSlug;\n    let i = 1;\n    while (posts.some(p => p.slug === uniqueSlug)) uniqueSlug = `${baseSlug}-${i++}`;\n    const post = {\n      id: crypto.randomUUID(),\n      slug: uniqueSlug,\n      title: input.title,\n      body: input.body,\n      author: input.author,\n      tags: input.tags ?? [],\n      publishedAt: now,\n      updatedAt: now,\n      published: !!input.published\n    };\n    this.save([post, ...posts]);\n    return post;\n  }\n  update(slug, changes) {\n    const posts = this._posts$.getValue();\n    const idx = posts.findIndex(p => p.slug === slug);\n    if (idx < 0) return undefined;\n    const existing = posts[idx];\n    let nextSlug = existing.slug;\n    if (changes.slug !== undefined || changes.title !== undefined) {\n      const desired = changes.slug?.trim() ? slugify(changes.slug) : changes.title ? slugify(changes.title) : existing.slug;\n      if (desired !== existing.slug) {\n        nextSlug = desired;\n        let i = 1;\n        while (posts.some((p, j) => j !== idx && p.slug === nextSlug)) {\n          nextSlug = `${desired}-${i++}`;\n        }\n      }\n    }\n    const next = {\n      ...existing,\n      ...changes,\n      slug: nextSlug,\n      updatedAt: new Date().toISOString()\n    };\n    const updated = posts.slice();\n    updated[idx] = next;\n    this.save(updated);\n    return next;\n  }\n  delete(slug) {\n    const filtered = this._posts$.getValue().filter(p => p.slug !== slug);\n    this.save(filtered);\n  }\n  static {\n    this.ɵfac = function BlogService_Factory(t) {\n      return new (t || BlogService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: BlogService,\n      factory: BlogService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","STORAGE_KEY","slugify","input","toLowerCase","trim","replace","loadInitial","raw","localStorage","getItem","parsed","JSON","parse","Array","isArray","seed","id","crypto","randomUUID","slug","title","body","author","tags","publishedAt","Date","toISOString","updatedAt","published","setItem","stringify","BlogService","constructor","_posts$","posts$","asObservable","save","next","list","getValue","slice","sort","a","b","localeCompare","getBySlug","find","p","create","now","baseSlug","posts","uniqueSlug","i","some","post","update","changes","idx","findIndex","undefined","existing","nextSlug","desired","j","updated","delete","filtered","filter","factory","ɵfac","providedIn"],"sources":["/Users/zaq/Documents/GitHub/Angular-APWU/src/app/features/blog/services/blog.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nconst STORAGE_KEY = 'apwu_blog_posts_v1';\n\nexport interface Post {\n  id: string;           // uuid\n  slug: string;         // url-safe unique\n  title: string;\n  body: string;         // markdown or plain text\n  author?: string;\n  tags?: string[];\n  publishedAt: string;  // ISO\n  updatedAt?: string;   // ISO\n  published: boolean;\n}\n\nfunction slugify(input: string): string {\n  return input\n    .toLowerCase()\n    .trim()\n    .replace(/[^a-z0-9\\s-]/g, '')\n    .replace(/\\s+/g, '-')\n    .replace(/-+/g, '-');\n}\n\nfunction loadInitial(): Post[] {\n  const raw = localStorage.getItem(STORAGE_KEY);\n  if (raw) {\n    try {\n      const parsed = JSON.parse(raw) as Post[];\n      if (Array.isArray(parsed)) return parsed;\n    } catch {}\n  }\n  // Seed data so list shows something on first load\n  const seed: Post[] = [\n    {\n      id: crypto.randomUUID(),\n      slug: 'welcome-to-apwu-austin',\n      title: 'Welcome to APWU Austin',\n      body: 'This is your new blog. Edit or create posts from the Editor.',\n      author: 'APWU Austin',\n      tags: ['welcome'],\n      publishedAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      published: true,\n    },\n    {\n      id: crypto.randomUUID(),\n      slug: 'monthly-meeting-reminder',\n      title: 'Monthly Meeting Reminder',\n      body: 'Our monthly meeting is the first Thursday at 6pm.',\n      author: 'Secretary',\n      tags: ['meetings', 'reminder'],\n      publishedAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      published: true,\n    },\n  ];\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(seed));\n  return seed;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class BlogService {\n  private _posts$ = new BehaviorSubject<Post[]>(loadInitial());\n  posts$ = this._posts$.asObservable();\n\n  private save(next: Post[]) {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(next));\n    this._posts$.next(next);\n  }\n\n  list(): Post[] {\n    return this._posts$.getValue().slice().sort((a, b) =>\n      (b.publishedAt ?? '').localeCompare(a.publishedAt ?? '')\n    );\n  }\n\n  getBySlug(slug: string): Post | undefined {\n    return this._posts$.getValue().find(p => p.slug === slug);\n  }\n\n  create(input: Omit<Post, 'id' | 'slug' | 'publishedAt' | 'updatedAt'> & { slug?: string }): Post {\n    const now = new Date().toISOString();\n    const baseSlug = input.slug?.trim() ? slugify(input.slug) : slugify(input.title);\n    const posts = this._posts$.getValue();\n    let uniqueSlug = baseSlug;\n    let i = 1;\n    while (posts.some(p => p.slug === uniqueSlug)) uniqueSlug = `${baseSlug}-${i++}`;\n\n    const post: Post = {\n      id: crypto.randomUUID(),\n      slug: uniqueSlug,\n      title: input.title,\n      body: input.body,\n      author: input.author,\n      tags: input.tags ?? [],\n      publishedAt: now,\n      updatedAt: now,\n      published: !!input.published,\n    };\n\n    this.save([post, ...posts]);\n    return post;\n  }\n\n  update(slug: string, changes: Partial<Post>): Post | undefined {\n    const posts = this._posts$.getValue();\n    const idx = posts.findIndex(p => p.slug === slug);\n    if (idx < 0) return undefined;\n\n    const existing = posts[idx];\n    let nextSlug = existing.slug;\n\n    if (changes.slug !== undefined || changes.title !== undefined) {\n      const desired = changes.slug?.trim()\n        ? slugify(changes.slug)\n        : changes.title\n          ? slugify(changes.title)\n          : existing.slug;\n\n      if (desired !== existing.slug) {\n        nextSlug = desired;\n        let i = 1;\n        while (posts.some((p, j) => j !== idx && p.slug === nextSlug)) {\n          nextSlug = `${desired}-${i++}`;\n        }\n      }\n    }\n\n    const next: Post = {\n      ...existing,\n      ...changes,\n      slug: nextSlug,\n      updatedAt: new Date().toISOString(),\n    };\n\n    const updated = posts.slice();\n    updated[idx] = next;\n    this.save(updated);\n    return next;\n  }\n\n  delete(slug: string) {\n    const filtered = this._posts$.getValue().filter(p => p.slug !== slug);\n    this.save(filtered);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}